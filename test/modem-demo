#!/usr/bin/python3

import time
import sys
import subprocess

import dbus

BUS = None
MANAGER = None
NO_NEWLINE_PRINTED = False

def print_countdown_message(msg, time_left):
    global NO_NEWLINE_PRINTED
    sys.stdout.write(u"\r\u001b[K")  # Clear line
    sys.stdout.write("{} ({})".format(msg, time_left))
    NO_NEWLINE_PRINTED = True
    if time_left == 0:
        NO_NEWLINE_PRINTED = False
        sys.stdout.write("\n")
    sys.stdout.flush()


def ensure_newline_printed():
    global NO_NEWLINE_PRINTED
    if NO_NEWLINE_PRINTED:
        print()
        NO_NEWLINE_PRINTED = False


def connect_to_ofono():
    global BUS
    global MANAGER
    subprocess.check_call(["systemctl", "start", "ofono"])
    if BUS is None:
        BUS = dbus.SystemBus()
    if MANAGER is None:
        MANAGER = dbus.Interface(BUS.get_object('org.ofono', '/'), 'org.ofono.Manager')


def list_modems():
    for i in range(30, -1, -1):
        modem_detected = False
        modems = MANAGER.GetModems()
        for path, _ in modems:
            if path:
                ensure_newline_printed()
                print("Modem: [ %s ]" % (path))
                modem_detected = True
                return
        print_countdown_message("Waiting for modem to start", i)
        time.sleep(1)

    ensure_newline_printed()
    if not modem_detected:
        raise Exception("Could not found any modem. "
                        "Make sure to connect the USB cable and to push the power button!")


def enable_modem():
    modems = MANAGER.GetModems()
    path = modems[0][0]
    print("Connecting modem %s..." % path)
    modem = dbus.Interface(BUS.get_object('org.ofono', path),
                           'org.ofono.Modem')
    modem.SetProperty("Powered", dbus.Boolean(1), timeout=120)


def set_context(apn_name):
    print("Setting APN: %s" % apn_name)
    modems = MANAGER.GetModems()
    for path, properties in modems:
        if "org.ofono.ConnectionManager" not in properties["Interfaces"]:
            continue

    connman = dbus.Interface(BUS.get_object('org.ofono', path),
                             'org.ofono.ConnectionManager')

    contexts = connman.GetContexts()
    if len(contexts) == 0:
        raise Exception("No context available")

    path = contexts[0][0]
    context = dbus.Interface(BUS.get_object('org.ofono', path),
                             'org.ofono.ConnectionContext')

    try:
        context.SetProperty("AccessPointName", apn_name)
    except dbus.DBusException:
        print("Error setting context %s property %s" % (path, apn_name))
        raise


def list_contexts():
    for _ in range(0, 20):
        context_found = False
    modems = MANAGER.GetModems()
    for path, _ in modems:
        if path:
            print("Context: [ %s ]" % (path))
            context_found = True
            return
    if not context_found:
        raise Exception("Could not found any context.")


def enable_roaming():
    print("Enabling roaming")
    modems = MANAGER.GetModems()
    for path, properties in modems:
        if "org.ofono.ConnectionManager" not in properties["Interfaces"]:
            continue
        connman = dbus.Interface(BUS.get_object('org.ofono', path),
                                 'org.ofono.ConnectionManager')
        connman.SetProperty("RoamingAllowed", dbus.Boolean(1))


def bring_modem_online():
    modems = MANAGER.GetModems()
    path = modems[0][0]

    print("Setting modem %s online..." % path)
    modem = dbus.Interface(BUS.get_object('org.ofono', path), 'org.ofono.Modem')
    modem.SetProperty("Online", dbus.Boolean(1), timeout=120)


def activate_context(apn_name, username, password):
    modems = MANAGER.GetModems()
    path = modems[0][0]
    for i in range(30, -1, -1):
        connman = dbus.Interface(BUS.get_object('org.ofono', path),
                                 'org.ofono.ConnectionManager')
        try:
            if (connman.GetProperties()["Powered"] and
                    connman.GetProperties()["Attached"] and
                    connman.GetProperties()["RoamingAllowed"]):
                ensure_newline_printed()
                print("Activating context")
                connman = dbus.Interface(BUS.get_object('org.ofono', path),
                                         'org.ofono.ConnectionManager')
                contexts = connman.GetContexts()
                if len(contexts) == 0:
                    raise Exception("No context available")

                connman.SetProperty("Powered", dbus.Boolean(1))
                path = contexts[0][0]
                context = dbus.Interface(BUS.get_object('org.ofono', path),
                                         'org.ofono.ConnectionContext')
                try:
                    context.SetProperty("AccessPointName", apn_name)
                except dbus.DBusException:
                    print("Error setting context %s property %s" % (path, apn_name))

                try:
                    context.SetProperty("Password", password)
                except dbus.DBusException:
                    print("Error setting context %s property %s" % (path, password))

                try:
                    context.SetProperty("Username", username)
                except dbus.DBusException:
                    print("Error setting context %s property %s" % (path, username))

                try:
                    context.SetProperty("Active", dbus.Boolean(1), timeout=100)
                except dbus.DBusException as exc:
                    print("Error activating %s: %s" % (path, str(exc)))
                    break
                print("Successfully activated context")
                return
        except dbus.exceptions.DBusException as exc:
            pass
        time.sleep(1)
        print_countdown_message("Waiting for context to be activated", i)
    ensure_newline_printed()
    print("Failed to activate context.")
    print("Is there a valid SIM card inserted in the modem?")


def deactivate_context():
    modems = MANAGER.GetModems()
    path = modems[0][0]
    print("Deactivating context...")
    for _ in range(0, 30):
        connman = dbus.Interface(BUS.get_object('org.ofono', path),
                                 'org.ofono.ConnectionManager')
        contexts = connman.GetContexts()
        if len(contexts) == 0:
            raise Exception("No context available")
        connman.SetProperty("Powered", dbus.Boolean(0))


def disable_modem():
    timeout = 30
    modems = MANAGER.GetModems()
    path = modems[0][0]
    print("Disconnecting modem {modem} ({tmo} seconds timeout)...".format(
        modem=path, tmo=timeout))
    modem = dbus.Interface(BUS.get_object('org.ofono', path),
                           'org.ofono.Modem')
    modem.SetProperty("Powered", dbus.Boolean(0), timeout=timeout)


def connect(apn, user, password):
    connect_to_ofono()
    list_modems()
    enable_modem()
    list_contexts()
    enable_roaming()
    bring_modem_online()
    activate_context(apn, user, password)


def disconnect():
    connect_to_ofono()
    deactivate_context()
    disable_modem()


def main(argv):
    if len(argv) < 2 or (len(argv) < 5 and argv[1] == "connect"):
        print("Usage: {script} <connect APN username password> | <disconnect>".format(
            script=__file__))
        return 1

    if argv[1] == "connect":
        connect(argv[2], argv[3], argv[4])
    elif argv[1] == "disconnect":
        disconnect()
    else:
        print("Unknown command: %s" % argv[1])
        return 1
    return 0

if __name__ == '__main__':
    exit(main(sys.argv))
